<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>9Hao</title><link>http://9hao.info/</link><description>人若无名,正是安心练剑之时</description><atom:link href="http://9hao.info/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 20 Oct 2014 00:00:00 +0800</lastBuildDate><item><title>轻量dalvik java hook框架</title><link>http://9hao.info/pages/2014/10/qing-liang-dalvik-java-hookkuang-jia</link><description>&lt;p&gt;&amp;emsp;&amp;emsp;很早之前学习xposed源码写了个java hook框架，不过配置比较麻烦，需要源码下编译，后面看了boyliang的《&lt;a href="http://blog.csdn.net/l173864930/article/details/39667355"&gt;Hook Java的的一个改进版本&lt;/a&gt;》,编译配置比较容易，花时间自己重写一个。(git:https://github.com/9hao/SwatHookV2)&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;两个对比了下，个人感觉xposed的 xposedAddLocalReference 函数用得很好，把Object*转为jobject,而boyliang的dvmGetMethodParamTypes函数用得很好，学习了ArrayObject的构造放方法，利用Object* 来调用一些函数。  &lt;/p&gt;
&lt;p&gt;有人问我两个问题：&lt;br /&gt;
[1] hook imsi对某些软件没效果。&lt;br /&gt;
&amp;emsp;&amp;emsp; 对此这类读取可以hook更底层的函数，服务的代理类，比如获取IMSI的函数getSubscriberId，可以对它的代理类com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy的getSubscriberId进行hook，同理别的服务也类似。（反过来，你也可以反射代理类来过别人简单的hook）  &lt;/p&gt;
&lt;p&gt;[2]动态加载hook不起效果&lt;br /&gt;
&amp;emsp;&amp;emsp;这个应该是hook的时机不对，xposed的一般hook是从加载apk后就进行FindClass查找目标函数进行hook，后面动态加载的class还没加载进来，FindClass目标函数就失败了，hook就不上了，针对这个情况，应检测动态加载的模块是否加载进来再hook，或者hook动态加载函数，检测加载完成后进行hook。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-10-20:pages/2014/10/qing-liang-dalvik-java-hookkuang-jia</guid><category>Android</category><category>java</category><category>Hook</category></item><item><title>apkpr思维导图</title><link>http://9hao.info/pages/2014/09/apkprsi-wei-dao-tu</link><description>&lt;p&gt;乱画个，mark
&lt;img alt="apkpro2" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/qJ6tiHrbVjWmR27L4Bc2bkJ1333JLUoapq4QccARrEc!/r/dPXKqlfYCAAA" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Tue, 16 Sep 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-09-16:pages/2014/09/apkprsi-wei-dao-tu</guid><category>Android</category><category>逆向分析</category></item><item><title>dex文件结构思维导图</title><link>http://9hao.info/pages/2014/08/dexwen-jian-jie-gou-si-wei-dao-tu</link><description>&lt;p&gt;&lt;img alt="dex" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/PSecMGllcbfSieniYUll.fwk9tjBh9I.HOnly82jYkI!/r/dAqdEFfNBgAA" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Wed, 27 Aug 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-08-27:pages/2014/08/dexwen-jian-jie-gou-si-wei-dao-tu</guid><category>Android</category><category>逆向分析</category></item><item><title>浅谈android完整性检测</title><link>http://9hao.info/pages/2014/08/qian-tan-androidwan-zheng-xing-jian-ce</link><description>&lt;blockquote&gt;
&lt;p&gt;常见android完整性检测&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;检测签名&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;校验&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;检验整个&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;这种比较少见&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;验证哪方面的检测&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;先直接对apk进行签名，然后安装运行，如果运行出错那么可以推测有签名检测；如果签名没问题，那反编译再回编译安装运行出问题，那么说明有校验classes.dex校验。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;找到校验的地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;针对签名&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;可以搜索&lt;/span&gt;&lt;span class="n"&gt;getPackageInfo&lt;/span&gt; &lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt; &lt;span class="n"&gt;Signature&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;signatures&lt;/span&gt;&lt;span class="err"&gt;、签名信息&lt;/span&gt;&lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="err"&gt;文件。&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;针对&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;搜索&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;解压缩&lt;/span&gt;&lt;span class="n"&gt;ZipEntry&lt;/span&gt;&lt;span class="err"&gt;，资源文件读取也可以注意下&lt;/span&gt;&lt;span class="p"&gt;.(&lt;/span&gt;&lt;span class="err"&gt;还有一些，暂时不记得了&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;算法&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;退出函数、错误提示等。&lt;/span&gt;
&lt;span class="err"&gt;搜索这些特征函数和字符串，找到校验的地方。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;突破校验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;1 爆破&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;如果只是本地校验，可以找到校验函数后修改调转&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;如果是网络验证，直接爆破容易失效。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;2 文件重定向&lt;/em&gt;
我们先看看两个常见的检测代码（摘自《Android安全与逆向分析》 防止重编译小结）&lt;br /&gt;
&lt;strong&gt;签名获取&lt;/strong&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getSignature&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      
        &lt;span class="n"&gt;PackageManager&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPackageManager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;PackageInfo&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPackageInfo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PackageManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GET_SIGNATURES&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Signature&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;signatures&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;签名重定向:
pi = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);&lt;br /&gt;
getPackageInfo hook掉 获取到原始的pi信息  (网上说如果动态加载的.是没法hook住的??，没验证，不可能把 00)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;classes.dex校验&lt;/strong&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;checkCRC&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;beModified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;crc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseLong&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;crc&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;ZipFile&lt;/span&gt; &lt;span class="n"&gt;zf&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;zf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getApplicationContext&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getPackageCodePath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;ZipEntry&lt;/span&gt; &lt;span class="n"&gt;ze&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getEntry&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;classes.dex&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.droider.checkcrc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ze&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCrc&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ze&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCrc&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;crc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;beModified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; 
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;beModified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;beModified&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dex重定向:&lt;br /&gt;
zf = new ZipFile(getApplicationContext().getPackageCodePath()); &lt;br /&gt;
hook ZipFile定向到原始的apk.  &lt;/p&gt;
&lt;p&gt;如果你能搜索到&lt;strong&gt;明文classes.dex&lt;/strong&gt;信息，可以修改明文字符串来重定向,参考帖子:&lt;br /&gt;
http://www.kanxue.com/bbs/showthread.php?t=190711  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你可以直接修改系统，把系统的签名校验给patch了&lt;/strong&gt;(参考:http://www.kanxue.com/bbs/showthread.php?t=190876)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;       &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;initZygote&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StartupParam&lt;/span&gt; &lt;span class="n"&gt;startupParam&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

               &lt;span class="n"&gt;XposedHelpers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAndHookMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;java.security.Signature&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;verify&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[].&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;XC_MethodHook&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
             &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;afterHookedMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodHookParam&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;XposedBridge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;disabled verifysignature......&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setResult&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TRUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;  
               &lt;span class="o"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps:这样有写局限，别人要装你修改的apk，需要装个xposed，当然自己也可以实现一个hook用于文件重定向，还有就是给系统带来风险.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;3 安装文件替换&lt;/em&gt;&lt;br /&gt;
 程序安装完成，apk文件将保存在/data/app（名字一般为：&lt;strong&gt;包名-1.apk或包名-2.apk&lt;/strong&gt;）、系统程序apk文件保存在/system/app &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;   &lt;span class="n"&gt;system&lt;/span&gt;    &lt;span class="mi"&gt;7892655&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;classes.dex文件保存在/data/dalvik-cache，供dalvik执行，命名方式&lt;strong&gt;data@app@包名-数字-apk@classes.dex&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;
&lt;span class="n"&gt;ache&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;                                   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;   &lt;span class="n"&gt;u0_a66&lt;/span&gt;    &lt;span class="mi"&gt;4974920&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;android系统在安装的时候校验签名，安装之后不校验, 这样我们就可以替换安装文件来绕过检测的目的 ^^.&lt;br /&gt;
把修改apk的签名替换成原本的apk的签名，然后在替换系统里面的apk和dex.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;\测试\&lt;/span&gt;&lt;span class="n"&gt;zhifu_sign&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dalvik&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;
&lt;span class="mi"&gt;4160&lt;/span&gt; &lt;span class="n"&gt;KB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7902332&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;1.854&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;和&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;&lt;span class="err"&gt;都可以&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;\测试\&lt;/span&gt;&lt;span class="n"&gt;zhifu_sign&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;citicbank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cyberpay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;
&lt;span class="mi"&gt;3235&lt;/span&gt; &lt;span class="n"&gt;KB&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7902332&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;2.385&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;写个脚本，杠杠的 00.   &lt;/p&gt;
&lt;p&gt;----------------------------------------------------分割线-------------------------------------------  &lt;/p&gt;
&lt;p&gt;但是呢，理想很丰满，现实很骨感------&lt;br /&gt;
签名还能怎么读  ？&lt;br /&gt;
特征字符串和特征函数有这么容易搜索到？&lt;br /&gt;
还有个apktool指纹 ^^  &lt;/p&gt;
&lt;p&gt;发现有人不会xposed插件编写，不打算为此写文章了，可以看朋友的&lt;a href="http://0nly3nd.sinaapp.com/?p=613"&gt;教程文章&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Sun, 24 Aug 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-08-24:pages/2014/08/qian-tan-androidwan-zheng-xing-jian-ce</guid><category>Android</category><category>逆向分析</category></item><item><title>android so壳入口浅析</title><link>http://9hao.info/pages/2014/08/android-soke-ru-kou-qian-xi</link><description>&lt;blockquote&gt;
&lt;p&gt;前言  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;开年来开始接触一些加固样本，基本都对了so进行了处理，拖入ida一看，要么没有 &lt;strong&gt;JNI_OnLoad&lt;/strong&gt;   ,要么 &lt;strong&gt;JNI_OnLoad&lt;/strong&gt;   汇编代码羞涩难懂，让人无法下手。 &lt;strong&gt;JNI_OnLoad&lt;/strong&gt;   是真正入口么？  &lt;/p&gt;
&lt;p&gt;先看看几个文档  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1  摘自属性服务一节（《深入理解Android卷1》）&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;     &lt;span class="err"&gt;利用&lt;/span&gt;&lt;span class="nx"&gt;gcc&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="err"&gt;属性，这个属性指明了一个&lt;/span&gt;&lt;span class="nx"&gt;__libc_prenit&lt;/span&gt;&lt;span class="err"&gt;函数&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;这个函数内部就将完成共享内存到本地进程的映射工作&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;。用法：当&lt;/span&gt;&lt;span class="nx"&gt;bionic&lt;/span&gt; &lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="err"&gt;库被加载时，将自动调用&lt;/span&gt;&lt;span class="nx"&gt;__libc_prenit&lt;/span&gt;&lt;span class="err"&gt;函数。这样在&lt;/span&gt;&lt;span class="nx"&gt;bionic&lt;/span&gt; &lt;span class="nx"&gt;libc&lt;/span&gt;&lt;span class="err"&gt;动态库被装载时，系统属性缓冲区地址就被确定了，后续的&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="err"&gt;调用就能找对位置了。&lt;/span&gt;

&lt;span class="cm"&gt;/* We flag the __libc_preinit function as a constructor to ensure * that its address is listed in libc.so&amp;#39;s .init_array section. * This ensures that the function is called by the dynamic linker * as soon as the shared library is loaded. */&lt;/span&gt; 

&lt;span class="c1"&gt;//constructor属性指示加载器加载该库之后，首先调用__libc_prenit函数。这一点和windows上的动态库的DllMain函数类似&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;__libc_prenit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从英文说明里面提到到.init_array section，我们可以搜索一下这一节的说明  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 .init_array section &lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;executed&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;constructors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;secondary&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;sometimes&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt; &lt;span class="n"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;systems&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;depending&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;live&lt;/span&gt; &lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;entirely&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;hack&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;startup&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt; &lt;span class="n"&gt;probably&lt;/span&gt; &lt;span class="n"&gt;ends&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ram&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;its&lt;/span&gt; &lt;span class="n"&gt;marked&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="err"&gt;—&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;happens&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;linking&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;linker&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;might&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;able&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;away&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;forcing&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;来源：&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//blog.sina.com.cn/s/blog_a9303fd901019kvq.html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;3 摘自dlopen小结(《程序员的自我修养》) &lt;/strong&gt;    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;动态连接器在加载模块时，会执行&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.init&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;段的代码&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;用以完成模块的初始化工作，&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="err"&gt;的加载过程基本跟动态连接器一致，在完成装载、映射和重定向以后，就会执行&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.init&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;段的代码然后返回&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看完这个3段资料，我们可以知道在系统加载so，在完成装载、映射和重定向以后，就首先执行&lt;strong&gt;.init&lt;/strong&gt;和&lt;strong&gt;.init_array&lt;/strong&gt;段的代码.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;探本溯源，在源码中追踪  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们先从&lt;a href="http://androidxref.com/4.1.2/xref/libcore/luni/src/main/java/java/lang/System.java#534"&gt;System.loadLibrary&lt;/a&gt; -&amp;gt;&lt;a href="http://androidxref.com/4.1.2/xref/libcore/luni/src/main/java/java/lang/Runtime.java#354"&gt;Runtime.loadLibrary&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;libName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;loadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;VMStack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCallingClassLoader&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * Loads and links a library without security checks.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
   &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loadLibrary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;libraryName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ClassLoader&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nativeLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;       
        &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-&amp;gt; &lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/native/java_lang_Runtime.cpp#Dalvik_java_lang_Runtime_nativeLoad"&gt;nativeLoad&lt;/a&gt;   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Dalvik_java_lang_Runtime_nativeLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="n"&gt;StringObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fileNameObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmLoadNativeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;classLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;来源：&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//androidxref.com/4.1.2/xref/dalvik/vm/native/java_lang_Runtime.cpp#72&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-&amp;gt;&lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/Native.cpp#318"&gt;dvmLoadNativeCode&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;dvmLoadNativeCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="kr"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;classLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kr"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RTLD_LAZY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

         &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="nx"&gt;vonLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dlsym&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JNI_OnLoad&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vonLoad&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ALOGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No JNI_OnLoad found in %s %p, skipping init&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;classLoader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;             * Call JNI_OnLoad.  We have to override the current class&lt;/span&gt;
&lt;span class="cm"&gt;             * loader, which will always be &amp;quot;null&amp;quot; since the stuff at the&lt;/span&gt;
&lt;span class="cm"&gt;             * top of the stack is around Runtime.loadLibrary().  (See&lt;/span&gt;
&lt;span class="cm"&gt;             * the comments in the JNI FindClass function.)&lt;/span&gt;
&lt;span class="cm"&gt;             */&lt;/span&gt;
            &lt;span class="nx"&gt;OnLoadFunc&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OnLoadFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;vonLoad&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;prevOverride&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;classLoaderOverride&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;classLoaderOverride&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classLoader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;oldStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dvmChangeStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;THREAD_NATIVE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gDvm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verboseJni&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;ALOGI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Calling&lt;/span&gt; &lt;span class="nx"&gt;JNI_OnLoad&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;gDvmJni.jniVm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;dvmChangeStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;classLoaderOverride&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prevOverride&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="nx"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;来源：&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//androidxref.com/4.1.2/xref/dalvik/vm/Native.cpp#318&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过dvmLoadNativeCode函数我们知道系统用dlopen加载so完成后，会查看有没有&lt;strong&gt;JNI_OnLoad&lt;/strong&gt;函数，有的话就调用.  &lt;/p&gt;
&lt;p&gt;我们再到&lt;a href="http://androidxref.com/4.1.2/xref/bionic/linker/dlfcn.c#54"&gt;dlopen&lt;/a&gt;函数探个究竟:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;soinfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dl_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cm"&gt;/*find_library 会判断so是否已经加载，如果没有加载，对so进行加载，完成一些初始化工作,有兴趣的读者可自行分析 */&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unlikely&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;set_dlerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DL_ERR_CANNOT_LOAD_LIBRARY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;call_constructors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;refcount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dl_lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-&amp;gt;&lt;a href="http://androidxref.com/4.1.2/xref/bionic/linker/linker.c#1519"&gt;call_constructors_recursive&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;call_constructors_recursive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;constructors_called&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Set this before actually calling the constructors, otherwise it doesn&amp;#39;t&lt;/span&gt;
    &lt;span class="c1"&gt;// protect against recursive constructor calls. One simple example of&lt;/span&gt;
    &lt;span class="c1"&gt;// constructor recursion is the libc debug malloc, which is implemented in&lt;/span&gt;
    &lt;span class="c1"&gt;// libc_malloc_debug_leak.so:&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. The program depends on libc, so libc&amp;#39;s constructor is called here.&lt;/span&gt;
    &lt;span class="c1"&gt;// 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so.&lt;/span&gt;
    &lt;span class="c1"&gt;// 3. dlopen() calls call_constructors_recursive() with the newly created&lt;/span&gt;
    &lt;span class="c1"&gt;//    soinfo for libc_malloc_debug_leak.so.&lt;/span&gt;
    &lt;span class="c1"&gt;// 4. The debug so depends on libc, so call_constructors_recursive() is&lt;/span&gt;
    &lt;span class="c1"&gt;//    called again with the libc soinfo. If it doesn&amp;#39;t trigger the early-&lt;/span&gt;
    &lt;span class="c1"&gt;//    out above, the libc constructor will be called again (recursively!).&lt;/span&gt;
    &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;constructors_called&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;FLAG_EXE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ %5d Calling preinit_array @ 0x%08x [%d] for &amp;#39;%s&amp;#39; ]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preinit_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preinit_array_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;call_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preinit_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preinit_array_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ %5d Done calling preinit_array for &amp;#39;%s&amp;#39; ]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preinit_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DL_ERR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%5d Shared library &amp;#39;%s&amp;#39; has a preinit_array table @ 0x%08x.&amp;quot;&lt;/span&gt;
                  &lt;span class="s"&gt;&amp;quot; This is INVALID.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preinit_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;代码略&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ %5d Calling init_func @ 0x%08x for &amp;#39;%s&amp;#39; ]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ %5d Done calling init_func for &amp;#39;%s&amp;#39; ]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ %5d Calling init_array @ 0x%08x [%d] for &amp;#39;%s&amp;#39; ]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//遍历函数数组并执行&lt;/span&gt;
    &lt;span class="n"&gt;call_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;TRACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[ %5d Done calling init_array for &amp;#39;%s&amp;#39; ]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//ps:看到这么多TRACE这么多调试信息，我们把调试开关打开，是不是能拿到诸多信息？&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;来源：&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//androidxref.com/4.1.2/xref/bionic/linker/linker.c#1519&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过可以函数我们知道&lt;strong&gt;si-&amp;gt;init_func&lt;/strong&gt;和&lt;strong&gt;si-&amp;gt;init_array&lt;/strong&gt;存在的时候，会执行指向的函数&lt;br /&gt;
(不知道大家注意到么si-&amp;gt;flags &amp;amp; FLAG_EXE时，还有si-&amp;gt;preinit_array？ 以后会不会有这方面的东西？)&lt;br /&gt;
再找下 &lt;strong&gt;si-&amp;gt;init_func&lt;/strong&gt;和&lt;strong&gt;si-&amp;gt;init_array&lt;/strong&gt;   的赋值  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;DT_INIT&lt;/span&gt;:
           &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%5d %s constructors (init func) found at %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_func&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;DT_INIT_ARRAY&lt;/span&gt;:
            &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%5d %s constructors (init_array) found at %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;si&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;init_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DEBUG里面说明了constructors (init func)和constructors (init_array)。&lt;br /&gt;
&amp;emsp;&amp;emsp;我们再看看一份文档&lt;a href="http://www.netmite.com/android/mydroid/1.6/bionic/linker/README.TXT"&gt;Android Dynamic Linker Design Notes&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;DT_INIT&lt;/span&gt;
      &lt;span class="nx"&gt;Points&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;initialization&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
      &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;must&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;DT_INIT_ARRAY&lt;/span&gt;
      &lt;span class="nx"&gt;Points&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addresses&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;must&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
      &lt;span class="nx"&gt;called&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;perform&lt;/span&gt; &lt;span class="nx"&gt;initialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Some&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt;
      &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt;
      &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

      &lt;span class="nx"&gt;Note&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;generally&lt;/span&gt; &lt;span class="nx"&gt;stored&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init_array&lt;/span&gt; &lt;span class="nx"&gt;section&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;通过层层分析，我们很清楚知道了系统加载so，在完成装载、映射和重定向以后，就首先执行&lt;strong&gt;.init&lt;/strong&gt;和&lt;strong&gt;.init_array&lt;/strong&gt;段的代码.   &lt;/p&gt;
&lt;p&gt;前面有一篇文章我已经对so加壳进行简单说明  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;把源码的&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="err"&gt;复制出来修改，在把自己&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;加载起来的时候&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;把自己内存里面某部分地址解密后&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;用自己的&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="err"&gt;打开返回一个&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt;&lt;span class="err"&gt;结构体&lt;/span&gt; &lt;span class="err"&gt;然后把当前&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt;&lt;span class="err"&gt;结构体替换原来的&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt;&lt;span class="err"&gt;结构体&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;小结  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;系统加载so，在完成装载、映射和重定向以后，就首先执行&lt;strong&gt;.init&lt;/strong&gt;和&lt;strong&gt;.init_array&lt;/strong&gt;段的代码，之后如果存在&lt;strong&gt;JNI_OnLoad&lt;/strong&gt; 就调用该函数.我们要对一个so进行分析，需要先看看有没有&lt;strong&gt;.init_array section&lt;/strong&gt;和&lt;strong&gt;.init   section&lt;/strong&gt;，so加壳一般会在初始化函数进行脱壳操作。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何在&lt;strong&gt;.init&lt;/strong&gt;和&lt;strong&gt;.init_array&lt;/strong&gt;段添加我们的函数  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="err"&gt;共享构造函数，在函数声明时加上&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__attribute__((constructor))&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;属性&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;init_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;对应有共享虚构函数，在程序&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;或者&lt;/span&gt;&lt;span class="nx"&gt;dlclose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;返回前执行&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;__attribute__&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;destructor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;fini_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="err"&gt;静态构造函数&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;在&lt;strong&gt;.init&lt;/strong&gt;和&lt;strong&gt;.init_array&lt;/strong&gt;下断点  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;init_array&lt;/span&gt;  &lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;ida&lt;/span&gt;&lt;span class="err"&gt;可以看到，&lt;/span&gt;  &lt;span class="err"&gt;可以对里面的函数数组下断点&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;ida&lt;/span&gt;&lt;span class="err"&gt;有时没识别出来&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;可用&lt;/span&gt;&lt;span class="n"&gt;readelf&lt;/span&gt;&lt;span class="err"&gt;查看入口点&lt;/span&gt;

&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;readelf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;桌面&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libsecexe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

 &lt;span class="mh"&gt;0x00000010&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SYMBOLIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="mh"&gt;0x0&lt;/span&gt;
 &lt;span class="mh"&gt;0x0000000c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="mh"&gt;0x11401&lt;/span&gt;
 &lt;span class="mh"&gt;0x00000019&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INIT_ARRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="mh"&gt;0x28ca4&lt;/span&gt;
 &lt;span class="mh"&gt;0x0000001b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INIT_ARRAYSZ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="mh"&gt;0x0000001a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FINI_ARRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="mh"&gt;0x28cac&lt;/span&gt;
 &lt;span class="mh"&gt;0x0000001c&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FINI_ARRAYSZ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="mh"&gt;0x00000004&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HASH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="mh"&gt;0xf4&lt;/span&gt;

&lt;span class="err"&gt;我们看到&lt;/span&gt; &lt;span class="n"&gt;INIT&lt;/span&gt; &lt;span class="err"&gt;入口为&lt;/span&gt;    &lt;span class="mh"&gt;0x11401&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;有时你在&lt;/span&gt;&lt;span class="mh"&gt;0x11401&lt;/span&gt;&lt;span class="err"&gt;是数据，你需要&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="err"&gt;，由于对齐关系，要从&lt;/span&gt;&lt;span class="mh"&gt;0x11401&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;开始）&lt;/span&gt;
&lt;span class="err"&gt;样本：梆梆&lt;/span&gt; &lt;span class="err"&gt;爱加密&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考： &lt;br /&gt;
[1] 《深入理解Android卷1》&lt;br /&gt;
[2] 《程序员的自我修养-链接、装载与库》&lt;br /&gt;
[3] &lt;a href="http://blog.csdn.net/dinuliang/article/details/5509009"&gt;android linker 浅析&lt;/a&gt;&lt;br /&gt;
[4] &lt;a href="http://www.netmite.com/android/mydroid/1.6/bionic/linker/README.TXT"&gt;Android Dynamic Linker Design Notes&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Wed, 13 Aug 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-08-13:pages/2014/08/android-soke-ru-kou-qian-xi</guid><category>Android</category><category>逆向分析</category></item><item><title>android工具箱(持续更新)</title><link>http://9hao.info/pages/2014/07/androidgong-ju-xiang-chi-xu-geng-xin</link><description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x0 前言&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp; 工欲善其事必先利其器。介绍一些常用工具和个别使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一些工具脚本&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;发现windows下发送到这个东西蛮方便的，研究一下脚本用来提高效率.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;Apk&lt;/span&gt;&lt;span class="err"&gt;反编译或回编译&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;                        
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;jd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="err"&gt;查看&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;或者转&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="err"&gt;文件&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;        &lt;span class="err"&gt;可以直接用&lt;/span&gt;&lt;span class="n"&gt;jd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="err"&gt;打开&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;&lt;span class="err"&gt;看&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="err"&gt;代码&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;baksmali&lt;/span&gt;&lt;span class="err"&gt;或&lt;/span&gt;&lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;Apk&lt;/span&gt;&lt;span class="err"&gt;反或回编译（调试）&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;               &lt;span class="err"&gt;主要用于&lt;/span&gt;&lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="err"&gt;调试打包&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="err"&gt;生成&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;&lt;span class="err"&gt;文件&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="err"&gt;对&lt;/span&gt;&lt;span class="n"&gt;Apk&lt;/span&gt;&lt;span class="err"&gt;进行签名&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="err"&gt;启动调试&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;     &lt;span class="n"&gt;ida&lt;/span&gt;&lt;span class="err"&gt;附加调试&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;时、&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;调试、&lt;/span&gt;&lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="err"&gt;调试&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;安装&lt;/span&gt;&lt;span class="n"&gt;APK&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;    &lt;span class="err"&gt;管家这些老是乱装东西，真不爽，直接用命令多好&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;jeb&lt;/span&gt;&lt;span class="err"&gt;打开&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;     &lt;span class="n"&gt;jeb&lt;/span&gt; &lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="err"&gt;的神器&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;把&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;Apk&lt;/span&gt;&lt;span class="err"&gt;反编译&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;&lt;span class="err"&gt;到&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;jeb&lt;/span&gt;&lt;span class="err"&gt;打开&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;&lt;span class="err"&gt;生成快捷方式再把快捷方式剪贴到用户的&lt;/span&gt;&lt;span class="n"&gt;sendto&lt;/span&gt;&lt;span class="err"&gt;文件夹&lt;/span&gt;  

&lt;span class="n"&gt;sendto&lt;/span&gt;&lt;span class="err"&gt;文件夹快速打开方式&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;按下&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="err"&gt;键，再搜索输入&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sendto&lt;/span&gt;  

&lt;span class="err"&gt;反编译回编译&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;可以右键发送至对应的操作，可以自行修改编号来排序&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;工具脚本&lt;/strong&gt;   &lt;br /&gt;
&lt;img alt="工具脚本" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/N2p7OdAkr4DMB8L5AbVUsv4FCJoInschzORXilUBbqc!/r/dPIjD1fNBgAA" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用启动apk调试&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="启动调试" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/8o2I00.HiMmHP6DXJcaXKP.7QUdWq9*s*0s67H2dgZ0!/r/dBOAB1fMBgAA" /&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;smali阅读工具&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apkstudio&lt;/span&gt;
&lt;span class="n"&gt;sublime&lt;/span&gt;
&lt;span class="n"&gt;ue&lt;/span&gt;
&lt;span class="n"&gt;notepad&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;修改之理&lt;/span&gt;
&lt;span class="n"&gt;SmaliViewer&lt;/span&gt;
&lt;span class="n"&gt;ida&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个工具各有优点，尝试一番，最后选择了notepad++，配合notepad++的一些插件，可以diy一个强大的smali ide&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;语法高亮配色&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="err"&gt;搜索&lt;/span&gt; &lt;span class="err"&gt;当前文件搜索、文件夹搜索、所有打开问题搜索&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;Explorer&lt;/span&gt; &lt;span class="err"&gt;文件浏览插件&lt;/span&gt;  &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Script&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;插件，通过这个插件可以&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="err"&gt;写些工具脚本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="mynotepad++" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/wWOtAtaAlzKb8gP1Y.VkCvnPngbz9NKkniPugcUJcBI!/r/dCHYrVegBgAA" /&gt;    &lt;/p&gt;
&lt;p&gt;&lt;em&gt;加上自己写的几个插件&lt;/em&gt;&lt;br /&gt;
&lt;img alt="myplugin++" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/63jXoNIQ1SjRDKrRmnZs70Lb7U0yy8Eed3OtxHOj8So!/r/dAZ*DVfLBgAA" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;openjava  可直接跳到java类（jd-gui，jeb研究中）&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="openjava" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/yDh.zdjB7llizRsEK4jM6d1GC4dZ6OxK3eEh*zdETrQ!/r/dCgaDFfMBgAA" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jumpsmali 调转到定义函数&lt;/strong&gt;&lt;br /&gt;
比如一个引用了invoke-static {v0}, Lcom/mydebug;-&amp;gt;log([B)V，使用插件后快速调转到mydebug.smali的.method public static log([B)V   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jumpback 从调转到定义函数返回&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gotosmalifile  快速调转到想打开的smali文件&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="  jump1 " src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/7KFpPykCwsZZi4jh59qNUepCRnmemO4OQzfv5waTaOQ!/r/dKLxC1fMBgAA" /&gt; &lt;img alt="  jump2" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/yeiZPpMPq2OcwgFNghYVpPZG*5fF4tHfPxpA5RtlzWY!/r/dJ7VcVbLDQAA" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;apktoolb  回编译并签名插件 &lt;/strong&gt;     &lt;br /&gt;
&lt;img alt="apktoolb" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/a*crsO8qqU7xxGgqPewzGsvNOEKo9qjKHDHA5E7YrBk!/r/dBvkdFbVDQAA" /&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;待更新&lt;/span&gt; 
&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="err"&gt;字符处理插件&lt;/span&gt;
&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;安装插件&lt;/span&gt;
&lt;span class="err"&gt;有谁看懂&lt;/span&gt;&lt;span class="n"&gt;notepad&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="err"&gt;函数语法的，交流下，想整个函数列表功能&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;apk java反编译&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;
&lt;span class="n"&gt;jad&lt;/span&gt;
&lt;span class="n"&gt;jeb&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="err"&gt;：不要过于相信这些工具，特别是加密算法分析的，&lt;/span&gt;&lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="err"&gt;才是根本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;so静态分析工具&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;IDA&lt;/span&gt;
&lt;span class="n"&gt;hopper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;so动态调试工具&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;IDA&lt;/span&gt;
&lt;span class="n"&gt;gdb&lt;/span&gt;
&lt;span class="n"&gt;Affinic&lt;/span&gt; &lt;span class="n"&gt;Debugger&lt;/span&gt; 
&lt;span class="n"&gt;gikdbg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;art&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ida+arm F5 下载链接: http://pan.baidu.com/s/1i3qqGoH  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ida&lt;/span&gt;&lt;span class="err"&gt;启动时附加&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="err"&gt;包&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;启动类&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;你要转发的端口&lt;/span&gt;  &lt;span class="n"&gt;jdwp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;调转&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ida&lt;/span&gt; &lt;span class="n"&gt;pro&lt;/span&gt; &lt;span class="n"&gt;attach&lt;/span&gt; &lt;span class="err"&gt;进程，&lt;/span&gt; &lt;span class="err"&gt;设置新线程，加载&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;时断点，&lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt; 
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;jdb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jdi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SocketAttach&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;转发的端口&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="err"&gt;：不能打开想&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="err"&gt;等调试工具，不然&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;会附加不上&lt;/span&gt;  

&lt;span class="err"&gt;如果想用&lt;/span&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="err"&gt;，第&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;步换成&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;打开调试选项&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Remote&lt;/span&gt; &lt;span class="n"&gt;Java&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;New_configuration&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="err"&gt;填包名&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Conenection&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="err"&gt;选择&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt; &lt;span class="n"&gt;Attach&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8700&lt;/span&gt;
&lt;span class="err"&gt;点击&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="err"&gt;即可&lt;/span&gt;  

&lt;span class="err"&gt;（我把调试命令封装在“启动调试&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;&lt;span class="err"&gt;”，可以试试）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;busybox&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux 工具里的瑞士军刀。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;镜像修改工具&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下emulator会以只读的形式加载system.img，即便remount之后对其进行的修改也不会实际被保存下来，
你要安装xposed或su管理工具就需要修改镜像.&lt;br /&gt;
&lt;strong&gt;mkfs.yaffs2.arm&lt;/strong&gt;   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaffs2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="err"&gt;镜像&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="err"&gt;工具&lt;/span&gt;
&lt;span class="err"&gt;你安装好&lt;/span&gt;&lt;span class="n"&gt;xposed&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;su&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="err"&gt;之后，用&lt;/span&gt;&lt;span class="n"&gt;mkfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaffs2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="err"&gt;把镜像&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="err"&gt;出来&lt;/span&gt;
&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt; 
&lt;span class="cp"&gt;#mount -o remount,rw /dev/block/mtdblock0 /system&lt;/span&gt;
&lt;span class="cp"&gt;# mkdir /filesname&lt;/span&gt;
&lt;span class="cp"&gt;#cd /filesname &lt;/span&gt;
&lt;span class="cp"&gt;#./mkfs.yaffs2.arm /system /filesname/my_system.img &lt;/span&gt;
&lt;span class="cp"&gt;#exit &lt;/span&gt;
&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;filesname&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;my_system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;  
&lt;span class="err"&gt;接着将该&lt;/span&gt;&lt;span class="n"&gt;my_system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="err"&gt;替换&lt;/span&gt;  &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;ANDROID_SDK&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="err"&gt;下的&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="err"&gt;即可&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;转自：&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.kanxue.com/bbs/showthread.php?t=191113)&lt;/span&gt;
&lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;这样做有个问题就是你有可能收到提示&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="err"&gt;空间不足，因为是在模拟器中，&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="err"&gt;时间过长&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;mkyaffs2image_y unyaffsimage&lt;/strong&gt;&lt;br /&gt;
如果有linux环境，可以尝试&lt;strong&gt;mkyaffs2image_y unyaffsimage&lt;/strong&gt;工具  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;解开镜像&lt;/span&gt; 
&lt;span class="cp"&gt;# ./unyaffsimage  system.img systemout&lt;/span&gt;
&lt;span class="err"&gt;你可以在解开镜像文件夹&lt;/span&gt;&lt;span class="n"&gt;systemout&lt;/span&gt;&lt;span class="err"&gt;添加你的程序，注意权限和用户组&lt;/span&gt;

&lt;span class="err"&gt;生成镜像&lt;/span&gt;
&lt;span class="cp"&gt;#./mkyaffs2image_y  ./systemout  systemnew.img&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以参考我写个一个脚本  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

rm system/app/QuickSearchBox.*
rm system/app/Calendar.*
rm system/app/Music.*

cp -av ./bin/su ./system/bin/su
cp -av ./bin/proxy.sh ./system/bin/proxy.sh
cp -av ./bin/redsocks ./system/bin/redsocks
cp -av ./bin/busybox ./system/bin/busybox
cp -av ./bin/Superuser.apk ./system/app/Superuser.apk
&lt;span class="nb"&gt;echo  &lt;/span&gt;add xposed support ..
cp -av ./system/bin/app_process ./system/bin/app_process.orig
cp -av -f ./bin/app_process_xposed ./system/bin/app_process
&lt;span class="nb"&gt;cd&lt;/span&gt; ./system/bin
&lt;span class="nb"&gt;pwd&lt;/span&gt;
ln -s -f proxy.sh proxy
&lt;span class="nb"&gt;echo  &lt;/span&gt;back ..
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
sudo chown -R 0:0 ./system/bin/
sudo chown -R 0:0 ./system/lib/
sudo chown -R 0:0 ./system/app/
&lt;span class="nb"&gt;echo &lt;/span&gt;chmod .........
chmod 644 ./system/app/Superuser.apk
chmod 4755 ./system/bin/su
chmod 755 ./system/bin/proxy.sh
chmod 755 ./system/bin/redsocks
chmod 755 ./system/bin/busybox
chmod 755 ./system/bin/app_process
&lt;span class="nb"&gt;pwd&lt;/span&gt;
./mkyaffs2image_y ./system systemNew.img&amp;gt;./log.txt
chmod 644 ./systemNew.img
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;hook框架&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xposed&lt;/span&gt;
&lt;span class="n"&gt;Cydiasubstrate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;adbd-Insecure&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你手机root后，adb shell 不是默认su权限，可以试试&lt;strong&gt;adbd-Insecure&lt;/strong&gt;。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网络协议分析工具&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="err"&gt;代理&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;autoproxy&lt;/span&gt;
&lt;span class="n"&gt;proxydroid&lt;/span&gt;

&lt;span class="err"&gt;抓包&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;HttpAnalyzer&lt;/span&gt;
&lt;span class="n"&gt;Fiddler&lt;/span&gt;
&lt;span class="n"&gt;tcpdump&lt;/span&gt;
&lt;span class="n"&gt;Wireshark&lt;/span&gt;
&lt;span class="n"&gt;burpsuite&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tcpdump&lt;/span&gt;&lt;span class="err"&gt;使用&lt;/span&gt;  
&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;tcpdump&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcpdump&lt;/span&gt; 
&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;755&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcpdump&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcpdump&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcap&lt;/span&gt;   &lt;span class="err"&gt;（运行抓包软件，抓到&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcap&lt;/span&gt; &lt;span class="err"&gt;的文件中）&lt;/span&gt;
&lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;      &lt;span class="err"&gt;（抓包停止）&lt;/span&gt;
&lt;span class="n"&gt;adb&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sdcard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcap&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcap&lt;/span&gt;      &lt;span class="err"&gt;（抓到的包导出到&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcap&lt;/span&gt; &lt;span class="err"&gt;中）&lt;/span&gt;
&lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;Wireshark&lt;/span&gt;&lt;span class="err"&gt;分析&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;windows下多终端工具&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ConEmu &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;审计工具&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;drozer &lt;br /&gt;
http://www.kanxue.com/bbs/showthread.php?t=191148  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;dSploit &lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android的网络渗透套件  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.xxx.com"&gt;涉及工具下载&lt;/a&gt;&lt;br /&gt;
（待更新）&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Wed, 30 Jul 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-07-30:pages/2014/07/androidgong-ju-xiang-chi-xu-geng-xin</guid><category>Android</category><category>逆向分析</category></item><item><title>浅谈android逆向分析那些拦路虎</title><link>http://9hao.info/pages/2014/07/qian-tan-androidni-xiang-fen-xi-na-xie-lan-lu-hu</link><description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x0 前言&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接触android逆向分析一年有余,碰到好些Android的逆向的拦路虎，也见证了android软件防护在一年中的发展历程，记录下遇到的一些问题。   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x1 混淆&lt;/strong&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;刚开始的android软件没经过代码混淆，这中些apk的smali看起来很明了，把dex转换成jar，用jd-gui查看，跟看源码差不多了（ps：jd-gui处理多重异常会出问题），后面混淆出现，大概有三种：   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;普通混淆，类名、变量名、函数名变成&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;这种，最常见&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="err"&gt;自定义混淆，类名、变量名、函数名变成&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;oOO0o&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;li1Ll&lt;/span&gt;&lt;span class="err"&gt;这种，你看&lt;/span&gt;&lt;span class="n"&gt;smali&lt;/span&gt;&lt;span class="err"&gt;就眼花撩乱&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="err"&gt;混淆&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;  &lt;span class="err"&gt;这种混淆没还研究到，类名、变量名、函数名变成&lt;/span&gt; &lt;span class="err"&gt;中文乱码，样本是&lt;/span&gt; &lt;span class="err"&gt;豌豆荚&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~&lt;strong&gt;反混淆&lt;/strong&gt;~~&lt;br /&gt;
&amp;emsp;&amp;emsp;有些apk混淆不完全，smali会有混淆前的类名,比如   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;La&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IWindowManager.java&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;这个你可以写个脚本把类修正为La/b/IWindowManage.有时候字段注解也会暴露混淆前的字段名，可以根据这些信息重命名.&lt;br /&gt;
&amp;emsp;&amp;emsp; 混淆彻底的你没有 .source这些的，这怎么办？自己定义命名规则，比如La/b/a;继承的是Thread，你可以命名为La/b/aThread，通过父类来重命名子类，这样把混淆的名字变成有意义的名字。&lt;br /&gt;
&amp;emsp;&amp;emsp; 总的来说你要需要做的:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="err"&gt;定义命名规则&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="err"&gt;修改脚本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x2 触发反编译工具的bug&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp; 触发反编译工具漏洞的bug使反编译工具崩溃而正常的反编译，比如:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;​&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;加入垃圾类，里面包含不正确的指令&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;超长类或数组&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;不存在的类指向&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;文件后缀和文件魔术头不符&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="err"&gt;文件&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="err"&gt;里加一个字符串资源，值等于“&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;空资源&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种五花八门，就不再列举，apktool现在修复了好多bug，目前碰到问题大多是资源那块。    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x3 完整性检测&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;  签名、dex文件md5和hash等。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x4 动态加载&lt;/strong&gt;   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;动态加载被大家所之后，慢慢的加固软件就出现了。&lt;br /&gt;
&lt;strong&gt;~~刚开始的动态加载比较简单，你可以从log看出~~&lt;/strong&gt;   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;DEX&lt;/span&gt; &lt;span class="n"&gt;prep&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app_sdk73100_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;   &lt;span class="err"&gt;可以知道&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;动态加载了&lt;/span&gt;&lt;span class="n"&gt;app_sdk73100_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;  &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;这样就找到&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;动态加载的包&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps:加固软件自己实现了dexopt，这段日志就没有  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~~接着是加载后删除~~&lt;/strong&gt;&lt;br /&gt;
几种拿到动态加载dex方法 :&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;a 使用lsof&lt;/em&gt;&lt;/strong&gt;   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;lsof&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;
&lt;span class="n"&gt;lsof&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;busybox&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;
&lt;span class="n"&gt;system_se&lt;/span&gt;   &lt;span class="mi"&gt;523&lt;/span&gt;     &lt;span class="n"&gt;system&lt;/span&gt;  &lt;span class="mi"&gt;298&lt;/span&gt;        &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;
&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiao&lt;/span&gt; &lt;span class="mi"&gt;10370&lt;/span&gt;     &lt;span class="n"&gt;u0_a65&lt;/span&gt;   &lt;span class="mi"&gt;44&lt;/span&gt;      &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app_sdk103700_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiao&lt;/span&gt; &lt;span class="mi"&gt;10370&lt;/span&gt;     &lt;span class="n"&gt;u0_a65&lt;/span&gt;   &lt;span class="mi"&gt;48&lt;/span&gt;      &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;
&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiao&lt;/span&gt; &lt;span class="mi"&gt;10370&lt;/span&gt;     &lt;span class="n"&gt;u0_a65&lt;/span&gt;   &lt;span class="mi"&gt;49&lt;/span&gt;       &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;

&lt;span class="err"&gt;通过命令反馈，可以知道&lt;/span&gt;&lt;span class="n"&gt;app_sdk103700_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="err"&gt;已经被删除&lt;/span&gt;
&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="err"&gt;，当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。&lt;/span&gt;
&lt;span class="mi"&gt;10370&lt;/span&gt;&lt;span class="err"&gt;是进程号&lt;/span&gt;  &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="err"&gt;是打开文件的&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="err"&gt;文件&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="err"&gt;映射在&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="err"&gt;里面&lt;/span&gt;
&lt;span class="err"&gt;用&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="err"&gt;命令把文件拷贝出来&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10370&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;
&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10370&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;
 &lt;span class="err"&gt;把文件&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="err"&gt;出来就拿到了删除的文件&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;b 调试工具附加内存dump&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
ida、gdb&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;idapython&lt;/span&gt;&lt;span class="err"&gt;内存&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="err"&gt;命令&lt;/span&gt;
&lt;span class="n"&gt;idc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaveFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;要保存的文件&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;起始位置&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;大小&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gdb&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;  &lt;span class="err"&gt;你要&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="err"&gt;的进程&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="err"&gt;号&lt;/span&gt;
&lt;span class="n"&gt;gcore&lt;/span&gt;
&lt;span class="n"&gt;gcore&lt;/span&gt;&lt;span class="err"&gt;会生成内存&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="err"&gt;名为&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="err"&gt;号&lt;/span&gt;
&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="err"&gt;号&lt;/span&gt; &lt;span class="err"&gt;文件&lt;/span&gt;&lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="err"&gt;出来，再把&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;&lt;span class="err"&gt;解析出来&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;这些&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt; &lt;span class="err"&gt;包含&lt;/span&gt;&lt;span class="n"&gt;odex&lt;/span&gt;&lt;span class="err"&gt;的指令，需要进行处理下&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;gdb&lt;/span&gt;   &lt;span class="err"&gt;如果不能附加到主进程，可以连上其他线程，&lt;/span&gt; &lt;span class="err"&gt;这些线程的&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;目录下&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;gdb&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;  &lt;span class="err"&gt;线程号&lt;/span&gt;
&lt;span class="err"&gt;后面同上&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;c 系统定制/hook&lt;/em&gt;&lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~~再后来是内存加载，反ptrace~~&lt;/strong&gt;   &lt;br /&gt;
后来网上放出内存dump之后，加固软件升级后,内存加载，反ptrace，ptrace之后附加dump暂时歇菜了
这个时候要跟踪调试或者定制系统了&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;跟踪调试，关键断点函数&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dvmjarFileOpen&lt;/span&gt;
&lt;span class="n"&gt;dvmDexFileOpenPartial&lt;/span&gt;
&lt;span class="n"&gt;openDexFile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;推荐大家读下&lt;a href="http://blog.csdn.net/caimouse/article/details/6747073"&gt;dex文件打开流程&lt;/a&gt;,再去读下源码，熟悉一下dex加载过程中的常用函数&lt;br /&gt;
思考dex加载到内存中经历了哪些操作，源码中见真相。 &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;hook或定制系统处理函数&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dexclassloader&lt;/span&gt;
&lt;span class="n"&gt;dvmjarFileOpen&lt;/span&gt;
&lt;span class="n"&gt;dvmDexFileOpenPartial&lt;/span&gt;
&lt;span class="n"&gt;openDexFile&lt;/span&gt;
&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="err"&gt;的构造函数&lt;/span&gt;

&lt;span class="err"&gt;自己实现&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x5 dex修改处理&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在主流加固商都对dex的结构进行修改，内存我们内存dump出来的dex不是完整的，需要经过修正，碰到样本特征如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;方法隐藏，指向空函数
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;函数方法都是native
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;动态修改字节码
&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;函数hook重定向
可以看看这样子：  

# direct methods
.method public constructor &lt;span class="nt"&gt;&amp;lt;init&amp;gt;&lt;/span&gt;()V
    .registers 1
    .prologue
    .line 34
    nop
    nop
    nop
    nop
.end method
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x6 so加壳&lt;/strong&gt;     &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个就不详谈了，大概的原理是：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;把源码的&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="err"&gt;复制出来修改，在把自己&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;加载起来的时候&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;把自己内存里面某部分地址解密后&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;用自己的&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="err"&gt;打开返回一个&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt;&lt;span class="err"&gt;结构体&lt;/span&gt; &lt;span class="err"&gt;然后把当前&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt;&lt;span class="err"&gt;结构体替换原来的&lt;/span&gt;&lt;span class="n"&gt;soinfo&lt;/span&gt;&lt;span class="err"&gt;结构体&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;谈谈我对脱壳的想法&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;经过一段时间的研究，也大概了解apk加固的基本原理。不管如何加固，apk运行时终归要把隐藏的dex解密加载，虽然可以dump，但是dex解密修改一般是修正内存的 DexFile结构，而不影响到内存映射的那部分dex（因此我们dump出来还是未修正的），我们想拿到一个正确的dex，要从修正内存的 DexFile结构开始解析。跟加固的小伙伴提过我的想法:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;从内存修正的&lt;/span&gt;&lt;span class="n"&gt;dexfile&lt;/span&gt;&lt;span class="err"&gt;逆推回去，还原正确的&lt;/span&gt;&lt;span class="n"&gt;dex&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;在内存中反编译&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;hoho，后面出现了脱壳神器ZjDroid，移植了baksmali，把正确的dex内存指向给baksmali，在内存中反编译，证明了我想法是可行（ps: 作为Android安全研究的业余人士跟这些专业人士没得比，想起句话“&lt;strong&gt;这个世界上有好想法的人很多，但有能力去实现的人很少。&lt;/strong&gt;”诚交对移动安全（漏洞挖掘、逆向分析、软件防护、反编译工具研究）感兴趣的小伙伴）.  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp; android加固的一些突破方法慢慢放出 ，加固的小伙伴已经开始考虑vm壳了（个人感觉还没必要用到这个，这些家伙，不带这么玩的 00）。android平台语言也开始多样化，主流的java，c/c++不变，小众lua 、js、html5、ruby、python等也开始多了, 路漫漫其修远兮......&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-07-27:pages/2014/07/qian-tan-androidni-xiang-fen-xi-na-xie-lan-lu-hu</guid><category>Android</category><category>逆向分析</category></item><item><title>android逆向分析之smali动态调试</title><link>http://9hao.info/pages/2014/07/androidni-xiang-fen-xi-zhi-smalidong-tai-diao-shi</link><description>&lt;p&gt;(不知攻，焉知防！) &lt;/p&gt;
&lt;p&gt;smali动态调试网上已经有很多文章了，刚开始开始是Apktool1.4.2支持，后面后面几个版本就阉割，貌似不稳定，到了 Apktool 2.0之后的版本又重新放出。给几个教程连接：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/android-apktool/wiki/SmaliDebugging"&gt;官网说明SmaliDebugging&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Netbean&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[1]&lt;a href="http://www.rover12421.com/2012/11/05/using-netbean-and-apktool-debugging-smali-code.html"&gt;使用Netbean和Apktool调试smali&lt;/a&gt;&lt;br /&gt;
[2]&lt;a href="http://www.colordancer.net/blog/2013/09/16/apktool-2-0-netbeans-7-3-%E8%B0%83%E8%AF%95apk/"&gt;apktool 2.0+netbeans 7.3调试apk&lt;/a&gt;&lt;br /&gt;
[3]&lt;a href="http://0nly3nd.sinaapp.com/?p=576"&gt;Netbeans 6.8 + apktool_2.0.0b9 动态调试smali文件&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;eclipse&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/xbalien29/article/details/27564365"&gt;apktool + eclipse 动态调试APK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;个人用eclipse习惯了，比较倾向于eclipse。&lt;/p&gt;
&lt;p&gt;动态调试还有jdb，andbug，JSwat Debugger，ida等等，谈谈每种调试的优劣.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jdb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;刚开始接触动态调试的时候是&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;，支持调试的基本功能，优点：可以在配置文件里面预下断点、批量下断点、给系统函数下载断点；缺点：没有界面，不支持查看寄存器的值，单步时跑着跑着就飞了。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;andbug&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;没怎么用过，看了一些文档介绍，感觉跟&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;差不多，它能做到的&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;也能做到（好吧，如果比&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;强，求打脸&lt;/span&gt; &lt;span class="mo"&gt;00&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;JSwat Debugger&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jdb&lt;/span&gt; &lt;span class="err"&gt;界面版，暂时没找到预下断点的地方&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;ida&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ida&lt;/span&gt; &lt;span class="mf"&gt;6.6&lt;/span&gt;&lt;span class="err"&gt;之后可以动态调试&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;，小试一把，感觉就像有界面的&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;的预断点没有，群里有人说能像&lt;/span&gt;&lt;span class="n"&gt;apktool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eclipse&lt;/span&gt;&lt;span class="err"&gt;一样看寄存器的值？&lt;/span&gt; &lt;span class="err"&gt;我试了试，只能看到类成员信息，难道我打开方式有错？&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;apktool + eclipse&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;可以单步调试，可以动态查看寄存的值（&lt;/span&gt;&lt;span class="n"&gt;NB&lt;/span&gt;&lt;span class="err"&gt;，原理是什么？）&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;但是不能在系统函数下断点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;个人感觉，动态调试最起码要知道apktool + eclipse和jdb调试，apktool + eclipse 但碰到以下场景就不合适了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;动态加载的&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="n"&gt;apktool&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eclipse&lt;/span&gt; &lt;span class="err"&gt;就歇菜了&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;系统函数下断点，比如你要对网络请求感兴趣，可以直接用&lt;/span&gt;&lt;span class="n"&gt;jdb&lt;/span&gt;&lt;span class="err"&gt;预下断点系统网络请求函数上&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;有完整性检测的&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="err"&gt;启动时附加&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;推荐阅读一篇分析&lt;a href="http://securityintelligence.com/diy-android-malware-analysis-taking-apart-obad-part-1/#.U_a9VPmSy7J"&gt;DIY: Android Malware Analysis – Taking Apart OBAD (Part 1)&lt;/a&gt;.学习分析思路和工具使用&lt;br /&gt;
每种调试工具都接触下，技多不压身^^。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ps:不必每次都在目标APK中的manifest文件中加入android:debuggable="true"，root手机把ro.debuggable设置为1，默认所有的apk都可调试&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2014.8.24更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;jdb的简单用法&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;以调试模式启动&lt;/span&gt;&lt;span class="nx"&gt;apk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;adb&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="nb"&gt;am&lt;/span&gt; &lt;span class="nb"&gt;start&lt;/span&gt; &lt;span class="na"&gt;-D&lt;/span&gt; &lt;span class="na"&gt;-n&lt;/span&gt; &lt;span class="err"&gt;包名&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;入口主类&lt;/span&gt;
&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;adb&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="nb"&gt;am&lt;/span&gt; &lt;span class="nb"&gt;start&lt;/span&gt; &lt;span class="na"&gt;-D&lt;/span&gt; &lt;span class="na"&gt;-n&lt;/span&gt; &lt;span class="nx"&gt;com.bee&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;com.bee.MainActivity&lt;/span&gt;
&lt;span class="nx"&gt;Starting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Intent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;com.bee&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;.MainActivity&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;jdwp&lt;/span&gt;&lt;span class="err"&gt;端口转发&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;adb&lt;/span&gt; &lt;span class="nb"&gt;forward&lt;/span&gt; &lt;span class="nx"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;要转发端口&lt;/span&gt; &lt;span class="nx"&gt;jdwp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="err"&gt;的进程号&lt;/span&gt;
&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;adb&lt;/span&gt; &lt;span class="nb"&gt;forward&lt;/span&gt; &lt;span class="nx"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt; &lt;span class="nx"&gt;jdwp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10706&lt;/span&gt;

&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;附加&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;jdb&lt;/span&gt; &lt;span class="na"&gt;-connect&lt;/span&gt; &lt;span class="nx"&gt;com.sun.jdi.SocketAttach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;转发端口&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;localhost&lt;/span&gt;
&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;jdb&lt;/span&gt; &lt;span class="na"&gt;-connect&lt;/span&gt; &lt;span class="nx"&gt;com.sun.jdi.SocketAttach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;localhost&lt;/span&gt; 

&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;查看所有加载类&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;

&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="err"&gt;查看类方法：&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt; &lt;span class="err"&gt;类名&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; methods Bee.PhoneInfo
** 方法列表 **
Bee.PhoneInfo &lt;span class="nt"&gt;&amp;lt;init&amp;gt;&lt;/span&gt;(android.content.Context)
Bee.PhoneInfo getAndroidId(android.content.Context)
Bee.PhoneInfo getInfoFromTelephonyManager(android.content.Context)
Bee.PhoneInfo getNumCores()
Bee.PhoneInfo getTotalMemory()
Bee.PhoneInfo isRoot()
Bee.PhoneInfo getCpuInfo()
Bee.PhoneInfo getProp(android.content.Context, java.lang.String)
Bee.PhoneInfo getProp()
Bee.PhoneInfo getResolution()
Bee.PhoneInfo toString()

6 查看类有哪些字段: fields Bee.PhoneInfo

&lt;span class="nt"&gt;&amp;lt;1&amp;gt;&lt;/span&gt; main&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; fields Bee.PhoneInfo
** 字段列表 **
android.content.Context context
Bee.UserInfo userInfo

7 设置断点:stop in 类名.方法名（注意带全路径和签名）
&amp;gt; stop in Bee.PhoneInfo.getProp()
设置断点Bee.PhoneInfo.getProp()

8 断点触发提示
断点命中: &amp;quot;线程=&lt;span class="nt"&gt;&amp;lt;1&amp;gt;&lt;/span&gt; main&amp;quot;, Bee.PhoneInfo.getProp(), 行=173 bci=0

9 查看当前类信息: dump this
   &lt;span class="nt"&gt;&amp;lt;1&amp;gt;&lt;/span&gt; main&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; dump this
 this = {
    context: instance of com.bee.MainActivity(id=830037271688)
    userInfo: instance of Bee.UserInfo(id=830037247560)
}
   查看当前字段信息:dump this.字段名 (后面给张图)

10 查看函数堆栈信息:where
&lt;span class="nt"&gt;&amp;lt;1&amp;gt;&lt;/span&gt; main&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; where
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; Bee.PhoneInfo.getProp (PhoneInfo.java:173)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; Bee.PhoneInfo.&lt;span class="nt"&gt;&amp;lt;init&amp;gt;&lt;/span&gt; (PhoneInfo.java:33)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; com.bee.MainActivity.onCreate (MainActivity.java:29)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.app.Activity.performCreate (Activity.java:5,020)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.app.Instrumentation.callActivityOnCreate (Instrumentation.java:1,080)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; com.lbe.security.service.core.client.b.x.callActivityOnCreate (null)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.app.ActivityThread.performLaunchActivity (ActivityThread.java:2,153)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.app.ActivityThread.handleLaunchActivity (ActivityThread.java:2,216)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.app.ActivityThread.access$600 (ActivityThread.java:149)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.app.ActivityThread$H.handleMessage (ActivityThread.java:1,305)
  &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; android.os.Handler.dispatchMessage (Handler.java:99)

11 单步: step
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dump图&lt;br /&gt;
&lt;img alt="dump图" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/ligvVfW8gB8A6vyPHr3sEnQzwaAIKjFFiK9xp7.3R9M!/r/dC08qVefBgAA" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;jswat&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;前两步同jdb。
附加:点session-&amp;gt;&lt;br /&gt;
&lt;img alt="jswatattach" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/446beoRAaXTbRgl6Jp0KTdNkiqKN1*tHTQHyP4CT9fk!/r/dJdsu067GQAA" /&gt;&lt;br /&gt;
断点&lt;br /&gt;
&lt;img alt="jswatbreak" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/SqGLU8eE4Kt6MjT3eu56jGg.xVpKVlxzWYChLxiMyPI!/r/dABNsk66GQAA" /&gt;&lt;br /&gt;
有界面jswat是有中文界面的，别的自己尝试吧   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;万用方法:help命令，google/baidu&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Mon, 21 Jul 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-07-21:pages/2014/07/androidni-xiang-fen-xi-zhi-smalidong-tai-diao-shi</guid><category>Android</category><category>逆向分析</category></item><item><title>android逆向分析之log篇</title><link>http://9hao.info/pages/2014/07/androidni-xiang-fen-xi-zhi-logpian</link><description>&lt;p&gt;(不知攻，焉知防！)   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x0 前言&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在以前逆向分析的分析，动态调试不成熟的时候，需要在反汇编程序smali插入汇编代码来追踪apk运行信息（也有人叫这种为smali注入）。想一下程序调试过程，断点，单步跟踪，查看寄存器/变量信息，看函数调用堆栈等等，通过调试过程来反馈的信息来分析apk。那么我们怎么用smali注入来达到“动态调试”目的?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x1 "断点"，"单步跟踪"，查看寄存器/变量信息&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp; 我们在关键的地方插入了log打印，如果程序执行到这个我们插入log的地方，输出我们打印的信息，这样是不是有点像"断点"触发","跟踪"，还输出了寄存器/变量信息?  虽然不能单步调试，至少能拿到一些信息。刚开始接触日志打印的时候，网上给的经验都是用系统log类调试。你用这个类会发现一个问题，他需要两个寄存器的值，invoke-static {vx, vy}, Landroid/util/Log;-&amp;gt;v(Ljava/lang/String;Ljava/lang/String;)I  ，vy不是String类型怎么办？vx没有需要构造寄存器，向上下翻看有没有可用的，不影响的，不行又要在.local加寄存器（- -#），这样做超级麻烦。要是只用一个寄存器就好了，那么怎么做？想想log类是系统提供的，我们在它基础上实现一个？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;str-&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;我们看看smali调用&lt;strong&gt;invoke-static {v0}, Lcom/mydebug;-&amp;gt;log(Ljava/lang/String;)V &lt;/strong&gt;这样是不是只要一个寄存器？举一反三，比如&lt;strong&gt;int、long、boolean&lt;/strong&gt; 等等，自己在log上面封装一层(代码是死的，人是活的，妈妈再也不担心我找不到寄存器了)&lt;br /&gt;
&amp;emsp;&amp;emsp;如果log重复，或者你只是需要你执行了哪个函数，你可以实现个标记函数  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;flag_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Run to here a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;调用&lt;strong&gt;&lt;em&gt;invoke-static {}, Lcom/mydebug;-&amp;gt;flag_a()V&lt;/em&gt;&lt;/strong&gt;，log日志的信息，就知道调用哪了，同样自己实现几个标记函数&lt;strong&gt;&lt;em&gt;flag_b,flag_c&lt;/em&gt;&lt;/strong&gt;啊等等.&lt;br /&gt;
&amp;emsp;&amp;emsp;哥们儿看了一篇帖子《Smali注入之打造属于自己的安卓crack利器》，然后推荐给我说，这方法精妙 00.  我诧异了，我去，骚年，我这不是好早就教你这招了？#24我于是看看这哥怎么加注入代码的，他把调试类的函数复制到要追踪的类，本来invoke-static {v0}, Lcom/mydebug;-&amp;gt;log(Ljava/lang/String;)V 是这样调用，最后他是invoke-static {v0}, Lcom/需要调试类名;-&amp;gt;log(Ljava/lang/String;)V ，每新分析一个apk，都要这样加一次。0 0 ，好吧，我这老师没做好，没教他自己归纳调试类.&lt;br /&gt;
&amp;emsp;&amp;emsp;&lt;strong&gt;&lt;em&gt;自己要实现自己调试类，加入自己常需要打印的类型，这样收集起来，这将会成为你smali log 注入利器。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x2 查看函数调用堆栈&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;我发现好些刚接触Android逆向的不知函数堆栈，更不用说log里面使用堆栈了，我面试新人的时候，问知道函数堆栈不，连这个都不知道的话，就不是我的菜了 00 。网上也有一些log堆栈的，居然是让程序报错来查看堆栈？我开始接触Android逆向的时候，搜索最多是Android调试，java调试，如何查看堆栈，了解一个平台的调试方法，看哪些能用到Android逆向上，而不是直接上去死磕。  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;其实Android打印堆栈的代码很简单  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/***&lt;/span&gt;
&lt;span class="cm"&gt;     * 调试栈函数！&lt;/span&gt;
&lt;span class="cm"&gt;     * @param n&lt;/span&gt;
&lt;span class="cm"&gt;     * 如果调用 preFun&lt;/span&gt;
&lt;span class="cm"&gt;     * n=2 是PreFun函数&lt;/span&gt;
&lt;span class="cm"&gt;     * n=3 是调用PreFun的fun&lt;/span&gt;
&lt;span class="cm"&gt;     * n=4 是fun的调用函数&lt;/span&gt;
&lt;span class="cm"&gt;     * &lt;/span&gt;
&lt;span class="cm"&gt;     * 在preFun里面的堆栈&lt;/span&gt;
&lt;span class="cm"&gt;     * 0-&amp;gt;dumpThreads&lt;/span&gt;
&lt;span class="cm"&gt;     * 1-&amp;gt;getStackTrace&lt;/span&gt;
&lt;span class="cm"&gt;     * 2-&amp;gt;Current&lt;/span&gt;
&lt;span class="cm"&gt;     * @return&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;preFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;StackTraceElement&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;strack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentThread&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;StackTraceElement&lt;/span&gt; &lt;span class="n"&gt;traceElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;logText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLASS_METHOD_LINE_FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;traceElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getClassName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;traceElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMethodName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;traceElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLineNumber&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;traceElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFileName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;logText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;你看就几行代码,巧这用几行代码，就可以打造自己的逆向类利器了。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;//&lt;/span&gt;追踪调用
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DefaultLocale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
public static void preFun&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    Log.v&lt;span class="p"&gt;(&lt;/span&gt;tag&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    StringBuilder sb &lt;span class="o"&gt;=&lt;/span&gt; new StringBuilder&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PreFun:here&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    StackTraceElement&lt;span class="p"&gt;[]&lt;/span&gt; strack &lt;span class="o"&gt;=&lt;/span&gt; Thread.currentThread&lt;span class="p"&gt;()&lt;/span&gt;.getStackTrace&lt;span class="p"&gt;();&lt;/span&gt;
    int i &lt;span class="o"&gt;=&lt;/span&gt; strack.length&lt;span class="p"&gt;;&lt;/span&gt;
    int k &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    StackTraceElement strackTemp&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;int j &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; j &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; i&lt;span class="p"&gt;;&lt;/span&gt; j&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        strackTemp &lt;span class="o"&gt;=&lt;/span&gt; strack&lt;span class="p"&gt;[&lt;/span&gt;j&lt;span class="p"&gt;];&lt;/span&gt;
        String logText &lt;span class="o"&gt;=&lt;/span&gt; String.format&lt;span class="p"&gt;(&lt;/span&gt;CLASS_METHOD_LINE_FORMAT&lt;span class="p"&gt;,&lt;/span&gt;
                strackTemp.getClassName&lt;span class="p"&gt;(),&lt;/span&gt; strackTemp.getMethodName&lt;span class="p"&gt;(),&lt;/span&gt;
                strackTemp.getLineNumber&lt;span class="p"&gt;(),&lt;/span&gt; strackTemp.getFileName&lt;span class="p"&gt;());&lt;/span&gt;
        sb.append&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;logText&lt;span class="p"&gt;);&lt;/span&gt;
        k&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;k &lt;span class="o"&gt;==&lt;/span&gt; stackFunNum&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    Log.v&lt;span class="p"&gt;(&lt;/span&gt;tag &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; preFun&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; sb.toString&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;//&lt;/span&gt; 常规打印函数！
public static void log&lt;span class="p"&gt;(&lt;/span&gt;String str&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    Log.v&lt;span class="p"&gt;(&lt;/span&gt;tag &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; preFun&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;str-&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; str&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\r\nPreFun:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;preFun&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; 定位函数！
&lt;span class="o"&gt;//&lt;/span&gt; 调用one_函数推栈从&lt;span class="m"&gt;3+1&lt;/span&gt;
public static void flag_a&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    Log.v&lt;span class="p"&gt;(&lt;/span&gt;tag &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; preFun&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Run to here a&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\r\nPreFun:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;preFun&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;日志输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="o"&gt;//&lt;/span&gt;String的打印日志   cn.mytest.MainActivity.onCreate&lt;span class="p"&gt;()&lt;/span&gt;调用了cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt; ，在test（&lt;span class="p"&gt;)&lt;/span&gt;函数里打印出相应的string值
    V&lt;span class="o"&gt;/&lt;/span&gt;mydebug cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;179&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.j&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9029&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; str&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;this is a test 
    V&lt;span class="o"&gt;/&lt;/span&gt;mydebug cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;179&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.j&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9029&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; PreFun&lt;span class="o"&gt;:&lt;/span&gt;cn.mytest.MainActivity.onCreate&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;42&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.java&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;flag的打印日志  在cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt; 的标记函数执行了
    V&lt;span class="o"&gt;/&lt;/span&gt;mydebug cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;170&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.j&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9029&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; Run to here a

     &lt;span class="o"&gt;//&lt;/span&gt;调用函数的打印日志 箭头看出了函数的调用过程
    V&lt;span class="o"&gt;/&lt;/span&gt;mydebug cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.j&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9029&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; PreFun&lt;span class="o"&gt;:&lt;/span&gt;here&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;cn.mytest.MainActivity.test&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;180&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.java&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;cn.mytest.MainActivity.onCreate&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;42&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;MainActivity.java&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;android.app.Activity.performCreate&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5020&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;Activity.java&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;android.app.Instrumentation.callActivityOnCreate&lt;span class="p"&gt;()&lt;/span&gt;  Line&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1080&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;Instrumentation.java&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x3 Android调试工具之Traceview&lt;/strong&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;traceName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mydebug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 跟踪 需要sd卡的写入权限&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;startT&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;preFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;startMethodTracing&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;PreFun:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;preFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startMethodTracing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stopT&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;preFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;stopMethodTracing&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s"&gt;PreFun:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;preFun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stopMethodTracing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;有时你要检测一个特定函数里面执行流程，如果直接用android Method Profiling，这样函数信息量带大，这时你就可以在该函数前调用startT，函数调用后stopT，这样就可以通过trace文件分析，Traceview的使用 自己google/度娘吧。&lt;br /&gt;
&amp;emsp;&amp;emsp; 我常用的log  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flag_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;startT&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;stopT&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="c1"&gt;//必须有stop才行&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;uses&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;vx&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;JSONObject&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flag_x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;preFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;   
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Landroid&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;InputStream&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;logHex&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;UrlEncodedFormEntity&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ByteArrayEntity&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lorg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HttpUriRequest&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;HttpURLConnection&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;Lcom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Ljava&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把堆栈函数加到自己的分析系统，运行apk，看下日志，很多行为调用都可以监测到。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x04 巧用正则，过滤掉无用log信息&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;手机日志信息过多，每次看一个进程，刷刷的就出超多的信息而覆盖了有用的信息，这个可以用正则过滤掉&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;在&lt;/span&gt;&lt;span class="n"&gt;ddms&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="err"&gt;过滤输入正则&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="nl"&gt;tag:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;?!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Network&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;MSThread&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;SurfaceTextureClient&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IMG_MMU&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;skia&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IspDrv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;JpegDecDriver&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;CdpDrv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;JpgDecComp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ImgScaler&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;iio&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Drv&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;

&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Network&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;MSThread&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;SurfaceTextureClient&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IMG_MMU&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;skia&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;IspDrv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;JpegDecDriver&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;CdpDrv&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;JpgDecComp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ImgScaler&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;iio&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;Drv&lt;/span&gt;  &lt;span class="err"&gt;是不想抓取的&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="err"&gt;，自己个照着加进入&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;刚开接触android逆向就开始用上面的日志方法，对那些软件防护不是特别强的软件，函数追踪，变量查看输出，无往不利 00, 这还没需要用到动态调试的地步.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;0x05 题外话&lt;/strong&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;代码是死的，人是活。&lt;br /&gt;
&amp;emsp;&amp;emsp;要学会举一反三，归纳小结，类比分析。&lt;br /&gt;
&amp;emsp;&amp;emsp;别人给的东西，终究是别人的轮子，要了解别人怎么造轮子，或者学会用别人的轮子来做东西，这样才是自己的，站在巨人的肩膀上。  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Sun, 20 Jul 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-07-20:pages/2014/07/androidni-xiang-fen-xi-zhi-logpian</guid><category>Android</category><category>逆向分析</category></item><item><title>android逆向分析之初探敌营</title><link>http://9hao.info/pages/2014/07/androidni-xiang-fen-xi-zhi-chu-tan-di-ying</link><description>&lt;p&gt;(不知攻，焉知防！)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;前言&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;参考非虫大大的书和写一些个人经验。在逆向一个Android程序，如果盲目的分析，有可能遇到阅读成千上万的反汇编代码才能找到程序的关键点，这无疑是浪费时间的表现。那么我们要对一个陌生的apk后怎么入手？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mh"&gt;0x01&lt;/span&gt; &lt;span class="err"&gt;初探&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;1 拿到一个apk，不要急于直接看汇编代码，先浏览一下apk的字符串信息，再大略浏览一下类和函数,大体在脑子里留个印象。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;2 application类 apk一般初始化配置的地方，壳初始化,如果有要注意下。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;3 主activity,程序的一般入口。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;4 如果是搞病毒木马分析，要注意 server和 广播。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mh"&gt;0x02&lt;/span&gt; &lt;span class="err"&gt;定位&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;1 信息反馈法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;上面我们提到先看字符串信息，根据你需求，你应该对一些字符串很敏感。比如你是想找内支付的，那有可能出现“支付成功”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;“支付失败”；你要找登录验证的，可能有&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;登录成功&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;、“登录失败”；病毒木马可能有“指令”“&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;成功等“，这些看自己的需求注意。&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="err"&gt;运行时过程中的反馈信息，&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="err"&gt;名，控件名，图片，提示信息（比如“&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;注册失败”）&lt;/span&gt;
    &lt;span class="err"&gt;通过这些特殊找到引用的地方。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;2 特征函数法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;程序的编写，总离不开系统提供的&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="err"&gt;函数，你可以从这些函数入手&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;控件的事件函数&lt;/span&gt;&lt;span class="n"&gt;onXXXClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="err"&gt;如果你要找网络方面的信息&lt;/span&gt;&lt;span class="n"&gt;HttpGet&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;HttpUriRequest&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="err"&gt;等等，追踪隐私&lt;/span&gt;&lt;span class="n"&gt;IMSI&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;IMEI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;敏感操作，发送短信、拨打电话&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;3 顺序查看法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;从软件的启动代码开始，一步步分析&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;这个&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp; 4 代码注入法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;在关键的地方，加入是的&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="err"&gt;调试函数来追踪程序的运行（&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="err"&gt;技巧，后面将写篇日志介绍）。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;5 堆栈跟踪法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;通过堆栈信息，查看函数调用流程。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp; 6 Method Profiling&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;在追踪按下一个按钮时调用函数调用特别有效，具体用法度娘&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp; 7 Log开关&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;软件编写过程，开发人员会使用&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="err"&gt;或者&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="err"&gt;来输出一些调试信息&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;有时候开发人员自己实现一个调试类或函数，里面有个&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="err"&gt;标识来判断是否输出调试信息（&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;有预编译，让编译时不把调试函数编译进去，&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="err"&gt;不行，因此这些信息会留在汇编代码中&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;，把调试标识打开，运行看下日志，有时会有惊喜&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="err"&gt;。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;  8 logcat输出信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;通过&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;运行中的输出日志，找到一些&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;运行信息&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Trying&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="n"&gt;xxxxxxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;   &lt;span class="err"&gt;加载了哪些&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;

    &lt;span class="n"&gt;InputMethodManager&lt;/span&gt;  &lt;span class="n"&gt;focusOut&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iflytek&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;morelist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MoreListView&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mi"&gt;41764490&lt;/span&gt; &lt;span class="n"&gt;mServedView&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;impl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhoneWindow&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;DecorView&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;419e5470&lt;/span&gt; &lt;span class="n"&gt;winFocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;   &lt;span class="err"&gt;可以知道在&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iflytek&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;morelist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MoreListView&lt;/span&gt;&lt;span class="err"&gt;这个类里面的控件等待用户输入&lt;/span&gt;

    &lt;span class="n"&gt;ActivityManager&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ryg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dynamicloadclient&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainActivity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TaskRecord&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;c97358&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ryg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dynamicloadclient&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="err"&gt;可以知道&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;启动了&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ryg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dynamicloadclien&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainActivity&lt;/span&gt;

     &lt;span class="n"&gt;DEX&lt;/span&gt; &lt;span class="n"&gt;prep&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sxiaoao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;car3d3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app_sdk73100_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="mi"&gt;87&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;   &lt;span class="err"&gt;可以知道&lt;/span&gt;&lt;span class="n"&gt;apk&lt;/span&gt;&lt;span class="err"&gt;动态加载了&lt;/span&gt;&lt;span class="n"&gt;app_sdk73100_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp; 初步分析的时候可以从上面提到技巧入手，后面熟悉之后可以自己写脚本，提取字符串，自己要关注的特征函数（适当的收集一些特征函数），可以写个沙盒才分析（那就嗖嗖的^^）,也可以使用一些成熟的分析工具androguard,沙盒droidbox、Apimonitor。在分析过程中，要思考下，如果你是开发人员，怎么开发这个app？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Tue, 15 Jul 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-07-15:pages/2014/07/androidni-xiang-fen-xi-zhi-chu-tan-di-ying</guid><category>Android</category><category>逆向分析</category></item><item><title>About me</title><link>http://9hao.info/pages/2014/06/about-me</link><description>&lt;p&gt;&lt;img alt="头像" src="http://r.photo.store.qq.com/psb?/V11zdJUK1IY4eb/uixm97omdaibua9eniwLfNkJevrIY*i*q8nCTJL5VfY!/r/dL4Ko1egBgAA" /&gt;&lt;br /&gt;
&lt;em&gt;伪码农一枚&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;伪安全工作者一枚&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;业余Android安全研究人员&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;擅长apk逆向分析，逆向工具编写&lt;/em&gt;   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;邮箱:feiqishizu2014#foxmail.com(把#换成@)&lt;/em&gt;   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Fri, 20 Jun 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-06-20:pages/2014/06/about-me</guid><category>关于我</category></item><item><title>android java hook 那点事(2)</title><link>http://9hao.info/pages/2014/05/android-java-hook-na-dian-shi-2</link><description>&lt;p&gt;(不知攻，焉知防！)  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;要说到&lt;strong&gt;android&lt;/strong&gt; 的&lt;strong&gt;java hook&lt;/strong&gt;不得不提国外大神的&lt;a href="https://github.com/rovo89"&gt;xposed框架&lt;/a&gt;（&lt;a href="http://www.kanxue.com/bbs/showthread.php?t=181436&amp;amp;viewgoodnees=1&amp;amp;prefixid="&gt;看雪上有贴子对它的分析&lt;/a&gt;），刚开始看源码的时候，有些地方不知道为什么这么做，why？why？,一直在脑子里转。带着疑问研究&lt;strong&gt;android&lt;/strong&gt;源码的之后，才晓其理。  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;通过&lt;a href="/pages/2014/03/android-java-hook-na-dian-shi-1"&gt;之前的日志&lt;/a&gt;我们知道了基本的&lt;strong&gt;android java hook&lt;/strong&gt; 原理，里面有一步是把method的nativeFunc值设为&lt;strong&gt;dvmResolveNativeMethod&lt;/strong&gt;，为什么这么做，可以看看&lt;a href="http://shyluo.blog.51cto.com/5725845/1229257"&gt;老罗的日志Dalvik虚拟机JNI方法的注册过程分析&lt;/a&gt;。&lt;strong&gt;xposed&lt;/strong&gt;和我们不同的是自己写了处理函数&lt;strong&gt;xposedCallHandler&lt;/strong&gt;,我好奇的是大神为什么这样实现？思路？记得&lt;strong&gt;java&lt;/strong&gt;里面有个&lt;strong&gt;proxy&lt;/strong&gt;类，也修改函数的执行，因此我看&lt;strong&gt;android&lt;/strong&gt;里这个类的实现源码，后面我追到了&lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/reflect/Proxy.cpp"&gt;Proxy.cpp&lt;/a&gt;,发现......   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Create a method in our Proxy class with the name and signature of&lt;/span&gt;
&lt;span class="cm"&gt; * the interface method it implements.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;createHandlerMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClassObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dstMeth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;srcMeth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
    &lt;span class="n"&gt;dstMeth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;accessFlags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ACC_PUBLIC&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ACC_NATIVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//@1 变为native函数&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argsSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmComputeMethodArgsSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dstMeth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//*@2 非静态函数，参数值加1,参数里面对了this&lt;/span&gt;
    &lt;span class="n"&gt;dstMeth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;registersSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dstMeth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argsSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//*@3 &lt;/span&gt;

    &lt;span class="n"&gt;dstMeth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nativeFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proxyInvoker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//*@native处理函数&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;emsp;&amp;emsp;如果看了上一篇文章,很熟悉是不是,我们再看看&lt;strong&gt;proxyInvoker&lt;/strong&gt;函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;proxyInvoker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;thisObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
    &lt;span class="n"&gt;argArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boxMethodArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
    &lt;span class="n"&gt;dvmCallMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;invokeResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;thisObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methodObj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我在源码中搜索声明为&lt;strong&gt;(const u4&lt;em&gt; args, JValue&lt;/em&gt; pResult,
    const Method&lt;em&gt; method, Thread&lt;/em&gt; self)&lt;/strong&gt;的函数，在&lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/Jni.cpp"&gt;jni.cpp&lt;/a&gt;中找到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * General form, handles all cases.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;dvmCallJNIMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;modArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;lockObj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;accessFlags&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ACC_STATIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lockObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cm"&gt;/* add the class object we pass in */&lt;/span&gt;
        &lt;span class="n"&gt;staticMethodClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jclass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;addLocalReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lockObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="cm"&gt;/* add &amp;quot;this&amp;quot; */&lt;/span&gt;
        &lt;span class="n"&gt;modArgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;addLocalReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;modArgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;noRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;shorty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shorty&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;        &lt;span class="cm"&gt;/* skip return type */&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shorty&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shorty&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;L&amp;#39;&lt;/span&gt;:
                &lt;span class="c1"&gt;//ALOGI(&amp;quot;  local %d: 0x%08x&amp;quot;, idx, modArgs[idx]);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modArgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;modArgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;addLocalReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;modArgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;:
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;J&amp;#39;&lt;/span&gt;:
                &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;default:&lt;/span&gt;
                &lt;span class="cm"&gt;/* Z B C S I -- do nothing */&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
    &lt;span class="n"&gt;dvmPlatformInvoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ClassObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;staticMethodClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jniArgInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modArgs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shorty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CHECK_STACK_SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;dvmChangeStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oldStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;convertReferenceResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;略&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结合这两个函数，你会发现&lt;strong&gt;xposed&lt;/strong&gt;的&lt;strong&gt;xposedCallHandler&lt;/strong&gt;是参照了上面两个函数.再看看proxyInvoker函数使用了&lt;strong&gt;dvmCallMethod invoke&lt;/strong&gt;函数,对函数进行分析，来到&lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/interp/Stack.cpp"&gt;dalvik/vm/interp/Stack.cpp&lt;/a&gt;，这个类是&lt;strong&gt;dalvik&lt;/strong&gt;实现执行java函数的地方。翻翻里面的函数，发现&lt;strong&gt;dvmInvokeMethod&lt;/strong&gt;函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Invoke&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt; &lt;span class="n"&gt;interfaces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;direct&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;including&lt;/span&gt; &lt;span class="n"&gt;constructors&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;  &lt;span class="n"&gt;Used&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reflection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;java&lt;/strong&gt; 类&lt;strong&gt;Method.invoke&lt;/strong&gt;最终实现的函数。&lt;strong&gt;xposed&lt;/strong&gt;通过该函数实现了调用hook 后的原始函数.  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;结合&lt;strong&gt;xposed&lt;/strong&gt;和源码，就可以写个自己的&lt;strong&gt;hook&lt;/strong&gt;框架了,在自己实现的过程中，研究源码，又发现了好玩的东东^^。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    函数参考proxyInvoker  dalvik\vm\reflect\Proxy.cpp   learn from xposed&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;

&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;handleInvoker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;u4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;LOGI&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JNI calling %p (%s.%s:%s):&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insns&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shorty&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;ThreadStatus&lt;/span&gt; &lt;span class="n"&gt;oldThreadStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MEMBER_VAL&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;JNIEnv&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;localenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetEnv&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;MethodOriginalIt&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findOriginalIt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;methodOrList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;LOGE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Can&amp;#39;t not find %s in original list!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;jclass&lt;/span&gt; &lt;span class="n"&gt;handleClass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;handleClass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findclass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localenv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;HANDLE_CLASS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//返回值是用NewLocalRef生成的，使用完后用DeleteLocalRef释放&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handleClass&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// get java.lang.reflect.Method object for original method&lt;/span&gt;
        &lt;span class="n"&gt;jobject&lt;/span&gt; &lt;span class="n"&gt;originalReflected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;localenv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ToReflectedMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jclass&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;addLocalReference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;),(&lt;/span&gt;&lt;span class="n"&gt;jmethodID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// convert/box arguments&lt;/span&gt;
        &lt;span class="n"&gt;jobjectArray&lt;/span&gt; &lt;span class="n"&gt;argsArray&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;thisObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;orMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;(*&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;dvmIsStaticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orMethod&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="n"&gt;thisObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*)&lt;/span&gt; &lt;span class="n"&gt;addLocalReference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*)&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
           &lt;span class="n"&gt;argsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boxMethodArgs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
           &lt;span class="n"&gt;argsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boxMethodArgs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 

        &lt;span class="n"&gt;jobject&lt;/span&gt; &lt;span class="n"&gt;resultRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;localenv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;CallStaticObjectMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handleClass&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;g_handleMethodID&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;originalReflected&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thisObject&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argsArray&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;localenv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;DeleteLocalRef&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handleClass&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmDecodeIndirectRef&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resultRef&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;ClassObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmGetBoxedReturnType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;primitiveType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PRIM_VOID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ignored&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dvmIsPrimitiveClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;dvmThrowNullPointerException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;null result when primitive expected&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;dvmUnboxPrimitive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pResult&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;dvmThrowClassCastException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;dvmChangeStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oldThreadStatus&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Sun, 11 May 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-05-11:pages/2014/05/android-java-hook-na-dian-shi-2</guid><category>Android</category><category>Hook</category></item><item><title>android java hook 那点事(1)</title><link>http://9hao.info/pages/2014/03/android-java-hook-na-dian-shi-1</link><description>&lt;p&gt;(不知攻，焉知防)  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;通过这篇&lt;a href="http://blog.csdn.net/luoshengyang/article/details/8914953"&gt;老罗的日志&lt;/a&gt;，我们可以了解到 dalvik在执行函数时会先调用dvmIsNativeMethod来判断一个method是否是native方法。如果是native函数的话，那么它所指向的一个Method对象的成员变量nativeFunc就指向该JNI方法的地址，因此就可以直接对它进行调用。否则的话，就说明参数method描述的是一个Java函数，这时候就需要继续调用函数dvmInterpret来执行它的代码。因此我们可以把一个非native的java函数变成native method，让dalvik执行我们的native方法而达到hook的目的。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;先看android代码的两个片段&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0x01&lt;/strong&gt;  &lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/oo/Class.cpp#2148"&gt;loadMethodFromDex&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pDexCode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* integer constants, copy over for faster access */&lt;/span&gt;
        &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;registersSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pDexCode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;registersSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pDexCode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;outsSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pDexCode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;outsSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/* pointer to code area */&lt;/span&gt;
        &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pDexCode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insns&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;         * We don&amp;#39;t have a DexCode block, but we still want to know how&lt;/span&gt;
&lt;span class="cm"&gt;         * much space is needed for the arguments (so we don&amp;#39;t have to&lt;/span&gt;
&lt;span class="cm"&gt;         * compute it later).  We also take this opportunity to compute&lt;/span&gt;
&lt;span class="cm"&gt;         * JNI argument info.&lt;/span&gt;
&lt;span class="cm"&gt;         *&lt;/span&gt;
&lt;span class="cm"&gt;         * We do this for abstract methods as well, because we want to&lt;/span&gt;
&lt;span class="cm"&gt;         * be able to substitute our exception-throwing &amp;quot;stub&amp;quot; in.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argsSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmComputeMethodArgsSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;dvmIsStaticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;argsSize&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;registersSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argsSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;outsSize&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insns&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dvmIsNativeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nativeFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmResolveNativeMethod&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jniArgInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computeJniArgInfo&lt;/span&gt;&lt;span class="o"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prototype&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;该函数会从dex 文件中解析DexMethod 成dalvik中执行的method,if(pDexCode != NULL) 判断是否存在dex代码，看else部分说明,可以知道该部分是dalvik对java native method处理过程。&lt;/p&gt;
&lt;p&gt;我们再看看dvmResolveNativeMethod函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0x02&lt;/strong&gt;  &lt;a href="http://androidxref.com/4.1.2/xref/dalvik/vm/Native.cpp#70"&gt;dvmResolveNativeMethod&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;该函数调用了&lt;strong&gt;dvmLookupInternalNativeMethod&lt;/strong&gt;和&lt;strong&gt;lookupSharedLibMethod&lt;/strong&gt;来查找jni中注册的native函数。
dalvik最后将执行得到的java native函数.  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;通过上面的代码片段，我们了解到要对一个java函数进行hook需要步骤有  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1] 把修改method的属性修改成native&lt;br /&gt;
[2] 修改method的registersSize、insSize、nativeFunc、computeJniArgInfo&lt;br /&gt;
[3] RegisterNatives注册目标method的native函数  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[1][2]示例代码如下(涉及到的一些函数可以从源码中复制或引入头文件)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setTargetMethodNative&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;SET_METHOD_FLAG&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACC_NATIVE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argsSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmComputeMethodArgsSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;dvmIsStaticMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;//非静态方法需要增加参数 this&lt;/span&gt;
                &lt;span class="n"&gt;argsSize&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dvmIsNativeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;registersSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insSize&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;outsSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nativeFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dvmResolveNativeMethod&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jniArgInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computeJniArgInfo&lt;/span&gt;&lt;span class="o"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prototype&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
             &lt;span class="o"&gt;}&lt;/span&gt;  
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会写jni的，RegisterNatives就不用说了吧.&lt;/p&gt;
&lt;p&gt;看雪上有篇以该原理实现的&lt;a href="http://www.kanxue.com/bbs/showthread.php?t=186054"&gt;帖子&lt;/a&gt;，可以参考。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">#123</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-03-20:pages/2014/03/android-java-hook-na-dian-shi-1</guid><category>Android</category><category>Hook</category></item><item><title>loser们的共同特征</title><link>http://9hao.info/pages/2014/03/losermen-de-gong-tong-te-zheng</link><description>&lt;p&gt;互联网提供了一个很好的窗口，使我们可以观察形形色色的人们，那么看到最多的，大概就是loser了。这也符合社会人群构成的分布，失意者往往是大多数，成功者往往是极少数。&lt;/p&gt;
&lt;p&gt;怎样摆脱失意，成就自己，不妨先看看loser有哪些共性，再看看自己占了几条。&lt;/p&gt;
&lt;p&gt;loser共性之一， 怨天尤人
  别人有个好老板，我们老板真抠门；别人有背景，我们是草根；等等，把自己的无能用“客观环境”来掩盖，乍一听条条是理，其实呢，别人成功都是偶然，自己的失败都是命不好。这样的人能成功才是没天理。今天无论是网络社区里，街边聊天里，听到最多的就是这种谈资，“我们老板不成，太黑，你看人家谁那单位”，每个行业，顶尖的人才都是极少数，而平庸的人总是过剩，你跨入那个门槛，你就会发现，其实你的老板非常大方，一点都不黑，关键是，你在门槛外，然后看着门槛内的人，觉得他们似乎是命运的宠儿。却从来无视这个门槛的存在，所以有人说某某网游公司核心工程师月薪2万3万，人家公司待遇多好，自己才拿两三千，却从来不肯面对自己的水平和人家的水平差多少。&lt;/p&gt;
&lt;p&gt;loser共性之二，不肯面对现实&lt;/p&gt;
&lt;p&gt;我们在每个IT社区(无论是donews还是techweb)都能看到很多这样的人物，他们就是不肯承认在他们身边有些人做出了不起的事业，就是不肯承认那些看上去比他们年轻，比他们资历要浅的人能够有所成就，于是怎样，把眼睛捂住，把耳朵捂住，死活不肯承认，比如要是有人发帖说百度的新毕业没几年的研发工程师年薪20万（在百度真tmd不算什么）就会有人跳出来说这是枪稿，根本不可能，或者说百度很快就完蛋云云，总之，幻觉，都是幻觉，他混了那么多年互联网，还在五位数的年薪苦苦挣扎呢，怎么能容忍别人一下子跑到他前面，而且是远远的甩开他，至于之前只会叫嚣说“百度要完蛋，腾讯要完蛋，马云要完蛋”等等的，都是这类人物，不肯面对现实，不肯承认别人的成就，以阿Q的心态蒙蔽自己，在yy中维持自己可怜的自尊和自信，就是这样的。当然这里还有另一类，就是某个神奇的理想破灭后，不肯面对现实，找出种种光挂陆离的借口来麻醉自己，比如某著名IT评论家，google的狂热支持者，在目睹了google进入中国后的昏招迭出和神话破灭后，发出了“谷歌不是google”的 论调，如此自我蒙蔽，在caoz眼里，也不过是一个著名的loser而已。 你听说过“华晨宝马不是宝马，北京奔驰不是奔驰”的话没？&lt;/p&gt;
&lt;p&gt;loser共性之三，迎难而退，拒绝挑战&lt;/p&gt;
&lt;p&gt;loser是不会承认自己迎难而退的，他们有足够的借口，比如说“我只拿这点钱，这个事情凭什么让我做”，或者说“那个谁谁谁工资更高，凭什么他不做”，以及“这事情不该我管”云云，总而言之，言而总之，一方面他认为自己和“那些人”的本事没有两样，另一方面他认为困难的事情是“那些人”份内的事情，他从来不想一下，自己要是老板，是凭实干给人工资呢？还是一面之辞，反正他认为自己的待遇低，级别低，所以又借口不去碰困难的事情，然后天天等着老板提薪长级。 迎难而退，永无机会。&lt;/p&gt;
&lt;p&gt;loser共性之四，没有目标&lt;/p&gt;
&lt;p&gt;严格的说，loser并非真的没有目标，他们也有诸如“中彩票得500万”，“公司给我加加薪”，“换一个好领导”，“这个公司混不下去了，听说那个公司不错，看看能不能找关系办过去”，以及甚至更高层次一点“学习一下面试技巧，争取混入一个好公司”这样的目标，但是他们的目标，你仔细看，往往都是要“遇贵人”才能办得到，并不是每个人都可以成为虚竹子的，于是他们往往嗟叹世无伯乐，他们只好混迹于平凡。&lt;/p&gt;
&lt;p&gt;caoz在之前的公司，经常给一些新员工作培训的时候，caoz的上司也在座的情况下，caoz会告诉新员工，你为谁打工？这是最重要的，而唯一正确的答案是，为自己。 你不是为老板工作，不是为公司工作，也不是为你的上司工作，而是为你自己工作，那么这里正好有一个非常好的案例，就是百度离职副总裁俞军，俞军是为李彦宏工作吗？其实根本不是，李彦宏提供了一个很好的工作平台，俞军是为实现自己的理想，完成自己的志愿而工作，而这样的工作态度，工作方式，也使他能够真正有所成就。并不是每个人都明白这个道理，所以很少有人能成为俞军。 caoz经常讲，打工要有创业心态，为什么这么说，是不是打工者最后都要去创业，不是，但是你要想的是，公司提供了一个环境，一个可以让你实现理想的环境，有人说了，你所在的公司不能提供这样的环境，那就找一个那样的环境！有人说了，找不到这样的公司，其实不是没有，而是你忽视了，因为你在找工作的时候，优先排列的是工资，福利待遇，级别，工作地点，公司品牌等等，而没有任何自己梦想在里面，看看俞军当年的求职简历吧，一个成功者是怎么找工作的。&lt;/p&gt;
&lt;p&gt;caoz有个前同事，做事其实还是很认真的，也很有成就，打工赚下几百万的身家，但是工作一直不够愉快，歇下来后要继续找工作，想去一个海外上市的网络公司做个小总监，问caoz的意见，caoz就问她，你还缺钱吗？你找这份工作的目的是什么？待遇？级别？你应该先想清楚自己到底想做什么，兴趣是什么，连几百万身价的人，有时候还在这样的思维套路里出不来，何况更多挣扎在底层的人。&lt;/p&gt;
&lt;p&gt;今天，caoz带一个很小的团队，仍然对每一个新人，灌输一个概念，你要想清楚自己的未来，要有目标的去工作。&lt;/p&gt;
&lt;p&gt;loser共性之五，瞻前顾后&lt;/p&gt;
&lt;p&gt;caoz说过一句话，悲观的人永无机会，其实顾虑重重的人也一样，失去高薪怎么办，政府政策改变怎么办，人才流失怎么办，细细筹划当然是好事情，但是当断不断那就会不断的错失机会。&lt;/p&gt;
&lt;p&gt;caoz这些年发现有一个有意思的事情，越是一些背景很强名校毕业生，越不敢去挑战自己，他们选择太多，机会太多，太多大公司给他们offer，太多好机会等着他们，于是在不断的选择中，迷失了自己的目标和方向，最后沉沦在一份看上去还不错的工作上，仅此而已，天幸不要碰到大规模金融危机，也许还能拿一份不错的养老金。 caoz的同学里，现在公认“混”的最好的，其实是当时同学里成绩最差的，毕业时候工作最差，工资最低的，但是他不断的改变角色，同时不断的充电，充实自己，转换位置，最后成为一家颇具规模公司的联合创始人，技术股东。他今天所获得的一切都是他努力付出的回报，和大学成绩无关，是在社会这所大学里，他得到了高分。&lt;/p&gt;
&lt;p&gt;caoz永远记得十年前一位当时颇有成就老板跟caoz说过的话，他说，如果他当年在北京能有一套属于自己的超小房子，他就不会有所成就，有点讽刺的是，他的第二次创业相当惨淡，那时候他已经是豪宅名车都有了。很多时候，没有选择反而可以坚定人的信念。但是如果你有很多选择，你还会坚定信念吗？&lt;/p&gt;
&lt;p&gt;loser共性之六，总有人比我差&lt;/p&gt;
&lt;p&gt;就好比小孩子学校里考了倒数第二，回家父母训他，他还会顶嘴说，谁谁谁还不如我呢，于是，总能在某些更惨的loser那里找到自信，然后麻痹自己。&lt;/p&gt;
&lt;p&gt;气人有，笑人无，第二次推荐已故相声大师侯耀文的相声，小眼看世界，送给这样的loser们。&lt;/p&gt;
&lt;p&gt;想不做loser的人们&lt;/p&gt;
&lt;p&gt;从现在开始&lt;/p&gt;
&lt;p&gt;给自己定一个目标&lt;/p&gt;
&lt;p&gt;迎难而上&lt;/p&gt;
&lt;p&gt;正视现实&lt;/p&gt;
&lt;p&gt;果断把握机会。&lt;/p&gt;
&lt;p&gt;把职场当作自己实现理想的平台。&lt;/p&gt;
&lt;p&gt;任何时候，你都有机会。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">互联网</dc:creator><pubDate>Thu, 20 Mar 2014 00:00:00 +0800</pubDate><guid>tag:9hao.info,2014-03-20:pages/2014/03/losermen-de-gong-tong-te-zheng</guid><category>杂文</category></item></channel></rss>